// ARQUIVO: C:\transportdf-mvp\frontend\app\passenger\dashboard.tsx
// DASHBOARD COMPLETO COM TODAS AS ATUALIZAÇÕES

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  TextInput,
  Modal,
  Platform,
  FlatList,
  Image,
  Animated,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { router } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import * as Location from 'expo-location';
import * as ImagePicker from 'expo-image-picker';
import ChatComponent from '../../components/ChatComponent';
import TripMapView from '../../components/TripMapView';
import GoogleMapView from '../../components/GoogleMapView';
import TripTypeModal from '../../components/TripTypeModal';
import { useGoogleMaps } from '../../components/useGoogleMaps';

const API_URL = process.env.EXPO_PUBLIC_BACKEND_URL;

// Utility functions for cross-platform alerts
const showAlert = (title: string, message?: string) => {
  if (Platform.OS === 'web') {
    if (message) {
      window.alert(`${title}\n\n${message}`);
    } else {
      window.alert(title);
    }
  } else {
    Alert.alert(title, message);
  }
};

const showConfirm = (title: string, message: string, onConfirm: () => void, onCancel?: () => void) => {
  if (Platform.OS === 'web') {
    const confirmed = window.confirm(`${title}\n\n${message}`);
    if (confirmed) {
      onConfirm();
    } else if (onCancel) {
      onCancel();
    }
  } else {
    Alert.alert(
      title,
      message,
      [
        { text: 'Cancelar', style: 'cancel', onPress: onCancel },
        { text: 'Confirmar', onPress: onConfirm },
      ]
    );
  }
};

interface User {
  id: string;
  name: string;
  email: string;
  user_type: string;
  profile_photo?: string;
}

interface Trip {
  id: string;
  driver_id?: string;
  driver_name?: string;
  driver_photo?: string;
  driver_rating?: number;
  pickup_address: string;
  destination_address: string;
  estimated_price: number;
  status: string;
  requested_at: string;
  rated?: boolean;
  passenger_name?: string;
  requested_by?: string;
  is_for_another_person?: boolean;
}

interface Report {
  id: string;
  reporter_id: string;
  reported_user_id: string;
  trip_id?: string;
  title: string;
  description: string;
  report_type: string;
  status: string;
  created_at: string;
  admin_message?: string;
  user_response?: string;
  response_allowed: boolean;
}

export default function PassengerDashboard() {
  // User and auth states
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(false);

  // Trip states
  const [currentTrip, setCurrentTrip] = useState<Trip | null>(null);
  const [tripHistory, setTripHistory] = useState<Trip[]>([]);
  const [showRequestModal, setShowRequestModal] = useState(false);
  const [destinationAddress, setDestinationAddress] = useState('');
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [location, setLocation] = useState<Location.LocationObject | null>(null);

  // Chat states
  const [showChatModal, setShowChatModal] = useState(false);
  const [newMessageAlert, setNewMessageAlert] = useState(false);

  // Google Map states - NOVOS ESTADOS
  const [showTripTypeModal, setShowTripTypeModal] = useState(false);
  const [showGoogleMapModal, setShowGoogleMapModal] = useState(false);
  const [tripIsForMe, setTripIsForMe] = useState(true);
  const [tripPassengerName, setTripPassengerName] = useState('');

  // Photo modal states
  const [showPhotoModal, setShowPhotoModal] = useState(false);
  const [selectedPhoto, setSelectedPhoto] = useState<string | null>(null);

  // Rating states
  const [showRatingModal, setShowRatingModal] = useState(false);
  const [selectedRating, setSelectedRating] = useState(0);
  const [ratingComment, setRatingComment] = useState('');
  const [tripToRate, setTripToRate] = useState<Trip | null>(null);

  // Report states
  const [reports, setReports] = useState<Report[]>([]);
  const [showReportModal, setShowReportModal] = useState(false);
  const [reportTitle, setReportTitle] = useState('');
  const [reportDescription, setReportDescription] = useState('');
  const [reportType, setReportType] = useState('general');

  // Admin message states
  const [adminMessages, setAdminMessages] = useState<any[]>([]);
  const [showAdminMessageModal, setShowAdminMessageModal] = useState(false);
  const [selectedAdminMessage, setSelectedAdminMessage] = useState<any>(null);

  // Animation for searching indicator
  const [searchingAnimation] = useState(new Animated.Value(0));

  // Google Maps Hook
  const { 
    geocodeAddress, 
    reverseGeocode, 
    getDirections, 
    calculateTripPrice,
    loading: mapsLoading,
    error: mapsError 
  } = useGoogleMaps();

  useEffect(() => {
    loadUserData();
    checkCurrentTrip();
    getCurrentLocation();
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      if (currentTrip) {
        checkCurrentTrip();
      }
      loadAdminMessages();
    }, 5000);

    return () => clearInterval(interval);
  }, [currentTrip]);

  useEffect(() => {
    if (currentTrip && (currentTrip.status === 'completed' || currentTrip.status === 'cancelled')) {
      loadTripHistory();
    }
  }, [currentTrip]);

  const getCurrentLocation = async () => {
    try {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        showAlert('Permissão negada', 'Permissão para acessar localização foi negada');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    } catch (error) {
      console.error('Error getting location:', error);
    }
  };

  const loadUserData = async () => {
    try {
      const token = await AsyncStorage.getItem('access_token');
      const response = await axios.get(`${API_URL}/api/users/me`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setUser(response.data);
    } catch (error: any) {
      console.error('Error loading user data:', error);
      if (error.response?.status === 401) {
        handleLogout();
      }
    }
  };

  const checkCurrentTrip = async () => {
    try {
      const token = await AsyncStorage.getItem('access_token');
      const response = await axios.get(`${API_URL}/api/trips/current`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      
      if (response.data) {
        setCurrentTrip(response.data);
        
        // Check if trip is completed and not rated
        if (response.data.status === 'completed' && !response.data.rated) {
          setTripToRate(response.data);
          setShowRatingModal(true);
        }
      } else {
        setCurrentTrip(null);
      }
    } catch (error: any) {
      console.error('Error checking current trip:', error);
    }
  };

  const loadTripHistory = async () => {
    try {
      const token = await AsyncStorage.getItem('access_token');
      const response = await axios.get(`${API_URL}/api/trips/history`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setTripHistory(response.data || []);
    } catch (error: any) {
      console.error('Error loading trip history:', error);
    }
  };

  const loadReports = async () => {
    try {
      const token = await AsyncStorage.getItem('access_token');
      const response = await axios.get(`${API_URL}/api/reports/my-reports`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setReports(response.data || []);
    } catch (error: any) {
      console.error('Error loading reports:', error);
    }
  };

  const loadAdminMessages = async () => {
    try {
      const token = await AsyncStorage.getItem('access_token');
      const response = await axios.get(`${API_URL}/api/admin/messages/user/${user?.id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setAdminMessages(response.data || []);
    } catch (error: any) {
      console.error('Error loading admin messages:', error);
    }
  };

  // NOVA FUNÇÃO: Handle Trip Type Confirm
  const handleTripTypeConfirm = (isForMe: boolean, passengerName?: string) => {
    setTripIsForMe(isForMe);
    setTripPassengerName(passengerName || '');
    setShowTripTypeModal(false);
    setShowGoogleMapModal(true);
  };

  // FUNÇÃO ATUALIZADA: Handle Google Maps Trip Request
  const handleGoogleMapTripRequest = async (tripData: {
    origin: { latitude: number; longitude: number };
    destination: { latitude: number; longitude: number };
    originAddress: string;
    destinationAddress: string;
    estimatedPrice: number;
    distance: string;
    duration: string;
    passengerName?: string;
  }) => {
    setLoading(true);
    try {
      const token = await AsyncStorage.getItem('access_token');
      
      // Dados para enviar ao backend
      const requestData = {
        passenger_id: user?.id,
        pickup_latitude: tripData.origin.latitude,
        pickup_longitude: tripData.origin.longitude,
        pickup_address: tripData.originAddress,
        destination_latitude: tripData.destination.latitude,
        destination_longitude: tripData.destination.longitude,
        destination_address: tripData.destinationAddress,
        estimated_price: tripData.estimatedPrice,
        // Se for para outra pessoa, adicionar informações extras
        ...(tripData.passengerName && {
          passenger_name: tripData.passengerName,
          requested_by: user?.name,
          is_for_another_person: true
        })
      };

      const response = await axios.post(
        `${API_URL}/api/trips/request`,
        requestData,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      if (response.data) {
        setCurrentTrip(response.data);
        setShowGoogleMapModal(false);
        
        const successMessage = tripData.passengerName 
          ? `Corrida solicitada para ${tripData.passengerName}!\nPreço estimado: R$ ${tripData.estimatedPrice.toFixed(2)}\nDistância: ${tripData.distance} • Tempo: ${tripData.duration}`
          : `Corrida solicitada!\nPreço estimado: R$ ${tripData.estimatedPrice.toFixed(2)}\nDistância: ${tripData.distance} • Tempo: ${tripData.duration}`;
        
        showAlert('Sucesso', successMessage);
      }
    } catch (error: any) {
      console.error('Erro ao solicitar corrida:', error);
      const errorMessage = error.response?.data?.detail || 'Erro ao solicitar corrida';
      showAlert('Erro', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleRequestTrip = async () => {
    if (!destinationAddress.trim()) {
      showAlert('Erro', 'Por favor, escolha um destino');
      return;
    }

    if (!location) {
      showAlert('Erro', 'Localização atual não disponível. Verifique as permissões de localização.');
      return;
    }

    setLoading(true);
    try {
      // Use current location as pickup (like Uber/99)
      const pickupLat = location.coords.latitude;
      const pickupLng = location.coords.longitude;
      
      // Get formatted address for current location
      const pickupGeocode = await reverseGeocode(pickupLat, pickupLng);
      const pickupFormattedAddress = pickupGeocode?.formatted_address || 'Sua localização atual';

      // Try to find destination in our local database first
      let destinationLat, destinationLng, destinationFormattedAddress;
      
      const brasiliaLocations = [
        { name: 'Asa Norte', coords: { lat: -15.7801, lng: -47.8827 } },
        { name: 'Asa Sul', coords: { lat: -15.8267, lng: -47.8934 } },
        { name: 'Taguatinga', coords: { lat: -15.8270, lng: -48.0427 } },
        { name: 'Ceilândia', coords: { lat: -15.8190, lng: -48.1076 } },
        { name: 'Gama', coords: { lat: -16.0209, lng: -48.0647 } },
        { name: 'Sobradinho', coords: { lat: -15.6536, lng: -47.7863 } },
        { name: 'Planaltina', coords: { lat: -15.4523, lng: -47.6142 } },
        { name: 'Aeroporto Internacional de Brasília (JK)', coords: { lat: -15.8711, lng: -47.9178 } },
        { name: 'Rodoviária do Plano Piloto', coords: { lat: -15.7945, lng: -47.8828 } },
        { name: 'Shopping Conjunto Nacional', coords: { lat: -15.7942, lng: -47.8922 } },
        { name: 'Shopping Brasília', coords: { lat: -15.7642, lng: -47.8822 } },
        { name: 'Universidade de Brasília (UnB)', coords: { lat: -15.7642, lng: -47.8722 } },
      ];
      
      const localDestination = brasiliaLocations.find(loc => 
        loc.name.toLowerCase() === destinationAddress.toLowerCase()
      );
      
      if (localDestination) {
        // Use local coordinates (more reliable)
        destinationLat = localDestination.coords.lat;
        destinationLng = localDestination.coords.lng;
        destinationFormattedAddress = `${localDestination.name}, Brasília - DF, Brasil`;
      } else {
        // Fallback to geocoding service
        const destinationGeocode = await geocodeAddress(destinationAddress);
        if (!destinationGeocode) {
          showAlert('Erro', 'Destino não encontrado. Tente usar sugestões da lista ou digite um local conhecido de Brasília.');
          return;
        }
        
        destinationLat = destinationGeocode.geometry.location.lat;
        destinationLng = destinationGeocode.geometry.location.lng;
        destinationFormattedAddress = destinationGeocode.formatted_address;
      }

      // Get route for better price calculation
      const route = await getDirections(
        { lat: pickupLat, lng: pickupLng },
        { lat: destinationLat, lng: destinationLng }
      );

      const estimatedPrice = route ? calculateTripPrice(route.distance) : 10.0;

      const token = await AsyncStorage.getItem('access_token');
      const response = await axios.post(
        `${API_URL}/api/trips/request`,
        {
          passenger_id: user?.id,
          pickup_latitude: pickupLat,
          pickup_longitude: pickupLng,
          pickup_address: pickupFormattedAddress,
          destination_latitude: destinationLat,
          destination_longitude: destinationLng,
          destination_address: destinationFormattedAddress,
          estimated_price: estimatedPrice,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      if (response.data) {
        setCurrentTrip(response.data);
        setDestinationAddress('');
        setShowSuggestions(false);
        setSuggestions([]);
        showAlert(
          'Sucesso', 
          `Corrida solicitada!\nPreço estimado: R$ ${estimatedPrice.toFixed(2)}\n${route ? `Distância: ${route.distance} • Tempo: ${route.duration}` : ''}`
        );
        
        setShowRequestModal(false);
      }
    } catch (error: any) {
      console.error('Erro ao solicitar corrida:', error);
      const errorMessage = error.response?.data?.detail || 'Erro ao solicitar corrida';
      showAlert('Erro', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleCancelTrip = async () => {
    if (!currentTrip) return;

    showConfirm(
      'Cancelar Corrida',
      'Tem certeza que deseja cancelar esta corrida?',
      async () => {
        setLoading(true);
        try {
          const token = await AsyncStorage.getItem('access_token');
          await axios.put(
            `${API_URL}/api/trips/${currentTrip.id}/cancel`,
            {},
            {
              headers: { Authorization: `Bearer ${token}` },
            }
          );
          setCurrentTrip(null);
          showAlert('Corrida cancelada', 'Sua corrida foi cancelada com sucesso');
        } catch (error: any) {
          console.error('Error cancelling trip:', error);
          const errorMessage = error.response?.data?.detail || 'Erro ao cancelar corrida';
          showAlert('Erro', errorMessage);
        } finally {
          setLoading(false);
        }
      }
    );
  };

  const handleRateDriver = async () => {
    if (!tripToRate || selectedRating === 0) {
      showAlert('Erro', 'Por favor, selecione uma avaliação');
      return;
    }

    setLoading(true);
    try {
      const token = await AsyncStorage.getItem('access_token');
      await axios.post(
        `${API_URL}/api/trips/${tripToRate.id}/rate`,
        {
          rating: selectedRating,
          comment: ratingComment.trim() || undefined,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      showAlert('Avaliação enviada', 'Obrigado por avaliar o motorista!');
      setShowRatingModal(false);
      setSelectedRating(0);
      setRatingComment('');
      setTripToRate(null);
      setCurrentTrip(null);
      loadTripHistory();
    } catch (error: any) {
      console.error('Error rating driver:', error);
      const errorMessage = error.response?.data?.detail || 'Erro ao enviar avaliação';
      showAlert('Erro', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleUploadPhoto = async () => {
    try {
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
        base64: true,
      });

      if (!result.canceled && result.assets[0].base64) {
        setLoading(true);
        const token = await AsyncStorage.getItem('access_token');
        await axios.put(
          `${API_URL}/api/users/profile-photo`,
          {
            profile_photo: `data:image/jpeg;base64,${result.assets[0].base64}`,
          },
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        await loadUserData();
        showAlert('Sucesso', 'Foto de perfil atualizada!');
      }
    } catch (error: any) {
      console.error('Error uploading photo:', error);
      const errorMessage = error.response?.data?.detail || 'Erro ao fazer upload da foto';
      showAlert('Erro', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmitReport = async () => {
    if (!reportTitle.trim() || !reportDescription.trim()) {
      showAlert('Erro', 'Por favor, preencha título e descrição');
      return;
    }

    setLoading(true);
    try {
      const token = await AsyncStorage.getItem('access_token');
      await axios.post(
        `${API_URL}/api/reports`,
        {
          title: reportTitle.trim(),
          description: reportDescription.trim(),
          report_type: reportType,
          trip_id: currentTrip?.id,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      showAlert('Relatório enviado', 'Seu relatório foi enviado com sucesso');
      setShowReportModal(false);
      setReportTitle('');
      setReportDescription('');
      setReportType('general');
      loadReports();
    } catch (error: any) {
      console.error('Error submitting report:', error);
      const errorMessage = error.response?.data?.detail || 'Erro ao enviar relatório';
      showAlert('Erro', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async () => {
    showConfirm(
      'Logout',
      'Tem certeza que deseja sair?',
      async () => {
        console.log('Logging out passenger...');
        await AsyncStorage.removeItem('access_token');
        router.replace('/');
      }
    );
  };

  const startSearchingAnimation = () => {
    Animated.loop(
      Animated.sequence([
        Animated.timing(searchingAnimation, {
          toValue: 1,
          duration: 1000,
          useNativeDriver: true,
        }),
        Animated.timing(searchingAnimation, {
          toValue: 0,
          duration: 1000,
          useNativeDriver: true,
        }),
      ])
    ).start();
  };

  const stopSearchingAnimation = () => {
    searchingAnimation.stopAnimation();
    searchingAnimation.setValue(0);
  };

  useEffect(() => {
    if (currentTrip && currentTrip.status === 'pending') {
      startSearchingAnimation();
    } else {
      stopSearchingAnimation();
    }
  }, [currentTrip]);

  const renderStarRating = (rating: number, onRatingChange?: (rating: number) => void) => {
    return (
      <View style={styles.starContainer}>
        {[1, 2, 3, 4, 5].map((star) => (
          <TouchableOpacity
            key={star}
            onPress={() => onRatingChange && onRatingChange(star)}
            disabled={!onRatingChange}
          >
            <Ionicons
              name={star <= rating ? 'star' : 'star-outline'}
              size={24}
              color={star <= rating ? '#FFD700' : '#C7C7CC'}
            />
          </TouchableOpacity>
        ))}
      </View>
    );
  };

  const getStatusText = (status: string) => {
    const statusMap: { [key: string]: string } = {
      'pending': 'Procurando motorista',
      'accepted': 'Motorista a caminho',
      'in_progress': 'Em andamento',
      'completed': 'Concluída',
      'cancelled': 'Cancelada',
    };
    return statusMap[status] || status;
  };

  const getStatusColor = (status: string) => {
    const colorMap: { [key: string]: string } = {
      'pending': '#FF9800',
      'accepted': '#2196F3',
      'in_progress': '#4CAF50',
      'completed': '#8BC34A',
      'cancelled': '#F44336',
    };
    return colorMap[status] || '#666';
  };

  if (!API_URL) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>Erro de configuração: URL da API não encontrada</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerLeft}>
          <TouchableOpacity onPress={handleUploadPhoto}>
            {user?.profile_photo ? (
              <Image source={{ uri: user.profile_photo }} style={styles.profileImage} />
            ) : (
              <View style={styles.profilePlaceholder}>
                <Ionicons name="person" size={24} color="#666" />
              </View>
            )}
          </TouchableOpacity>
          <View style={styles.headerText}>
            <Text style={styles.welcomeText}>Olá, {user?.name || 'Usuário'}!</Text>
            <Text style={styles.subtitleText}>Para onde vamos hoje?</Text>
          </View>
        </View>
        <TouchableOpacity onPress={handleLogout} style={styles.logoutButton}>
          <Ionicons name="log-out-outline" size={24} color="#FF3B30" />
        </TouchableOpacity>
      </View>

      {/* Current Trip Card */}
      {currentTrip && (
        <View style={styles.currentTripCard}>
          <View style={styles.tripHeader}>
            <Text style={styles.tripTitle}>
              {currentTrip.is_for_another_person ? `Viagem de ${currentTrip.passenger_name}` : 'Sua Viagem Atual'}
            </Text>
            <View style={[styles.statusBadge, { backgroundColor: getStatusColor(currentTrip.status) }]}>
              <Text style={styles.statusText}>{getStatusText(currentTrip.status)}</Text>
            </View>
          </View>

          {currentTrip.status === 'pending' && (
            <View style={styles.searchingContainer}>
              <Animated.View
                style={[
                  styles.searchingIndicator,
                  {
                    opacity: searchingAnimation,
                  },
                ]}
              >
                <Ionicons name="car" size={24} color="#4CAF50" />
              </Animated.View>
              <Text style={styles.searchingText}>Procurando motorista próximo...</Text>
            </View>
          )}

          {currentTrip.driver_name && (
            <View style={styles.driverInfo}>
              <TouchableOpacity
                onPress={() => {
                  if (currentTrip.driver_photo) {
                    setSelectedPhoto(currentTrip.driver_photo);
                    setShowPhotoModal(true);
                  }
                }}
              >
                {currentTrip.driver_photo ? (
                  <Image source={{ uri: currentTrip.driver_photo }} style={styles.driverPhoto} />
                ) : (
                  <View style={styles.driverPhotoPlaceholder}>
                    <Ionicons name="person" size={24} color="#666" />
                  </View>
                )}
              </TouchableOpacity>
              <View style={styles.driverDetails}>
                <Text style={styles.driverName}>{currentTrip.driver_name}</Text>
                {currentTrip.driver_rating && (
                  <View style={styles.driverRating}>
                    {renderStarRating(currentTrip.driver_rating)}
                    <Text style={styles.ratingText}>({currentTrip.driver_rating.toFixed(1)})</Text>
                  </View>
                )}
              </View>
            </View>
          )}

          <View style={styles.tripDetails}>
            <View style={styles.tripRoute}>
              <View style={styles.routePoint}>
                <Ionicons name="radio-button-on" size={12} color="#4CAF50" />
                <Text style={styles.routeText}>{currentTrip.pickup_address}</Text>
              </View>
              <View style={styles.routeLine} />
              <View style={styles.routePoint}>
                <Ionicons name="location" size={12} color="#FF3B30" />
                <Text style={styles.routeText}>{currentTrip.destination_address}</Text>
              </View>
            </View>
            <View style={styles.tripPrice}>
              <Text style={styles.priceText}>R$ {currentTrip.estimated_price.toFixed(2)}</Text>
            </View>
          </View>

          {currentTrip.is_for_another_person && (
            <View style={styles.passengerInfoCard}>
              <Ionicons name="person" size={16} color="#007AFF" />
              <Text style={styles.passengerInfoText}>
                Solicitada por você para: {currentTrip.passenger_name}
              </Text>
            </View>
          )}

          <View style={styles.tripActions}>
            {(currentTrip.status === 'accepted' || currentTrip.status === 'in_progress') && (
              <TouchableOpacity
                style={styles.chatButton}
                onPress={() => {
                  setShowChatModal(true);
                  setNewMessageAlert(false);
                }}
              >
                <Ionicons name="chatbubbles" size={20} color="#fff" />
                <Text style={styles.chatButtonText}>Chat com Motorista</Text>
                {newMessageAlert && (
                  <View style={styles.messageAlert}>
                    <Text style={styles.messageAlertText}>!</Text>
                  </View>
                )}
              </TouchableOpacity>
            )}

            {currentTrip.status === 'pending' && (
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={handleCancelTrip}
                disabled={loading}
              >
                <Ionicons name="close" size={20} color="#fff" />
                <Text style={styles.cancelButtonText}>Cancelar</Text>
              </TouchableOpacity>
            )}

            {(currentTrip.status === 'accepted' || currentTrip.status === 'in_progress') && (
              <View style={styles.mapContainer}>
                <TripMapView trip={currentTrip} />
              </View>
            )}
          </View>
        </View>
      )}

      {/* Main Actions */}
      {!currentTrip && (
        <View style={styles.mainActions}>
          <View style={styles.actionGrid}>
            <TouchableOpacity
              style={styles.requestButton}
              onPress={() => setShowTripTypeModal(true)}
            >
              <Ionicons name="add" size={24} color="#fff" />
              <Text style={styles.requestButtonText}>Solicitar Viagem</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.actionButton}
              onPress={() => {
                loadTripHistory();
                router.push('/passenger/history');
              }}
            >
              <Ionicons name="time" size={24} color="#4CAF50" />
              <Text style={styles.actionButtonText}>Histórico</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.actionButton}
              onPress={() => {
                loadReports();
                setShowReportModal(true);
              }}
            >
              <Ionicons name="flag" size={24} color="#FF9800" />
              <Text style={styles.actionButtonText}>Reportar</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.actionButton}
              onPress={() => {
                loadAdminMessages();
              }}
            >
              <Ionicons name="mail" size={24} color="#2196F3" />
              <Text style={styles.actionButtonText}>Mensagens</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}

      {/* Recent Trips */}
      {!currentTrip && tripHistory.length > 0 && (
        <View style={styles.recentTrips}>
          <Text style={styles.sectionTitle}>Viagens Recentes</Text>
          <FlatList
            data={tripHistory.slice(0, 3)}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => (
              <View style={styles.tripHistoryItem}>
                <View style={styles.tripInfo}>
                  <Text style={styles.tripDestination}>{item.destination_address}</Text>
                  <Text style={styles.tripDate}>
                    {new Date(item.requested_at).toLocaleDateString('pt-BR')}
                  </Text>
                  {item.is_for_another_person && (
                    <Text style={styles.tripPassenger}>Para: {item.passenger_name}</Text>
                  )}
                </View>
                <View style={styles.tripMeta}>
                  <Text style={styles.tripPrice}>R$ {item.estimated_price.toFixed(2)}</Text>
                  <View style={[styles.tripStatus, { backgroundColor: getStatusColor(item.status) }]}>
                    <Text style={styles.tripStatusText}>{getStatusText(item.status)}</Text>
                  </View>
                </View>
              </View>
            )}
          />
        </View>
      )}

      {/* Admin Messages */}
      {adminMessages.length > 0 && (
        <View style={styles.adminMessages}>
          <Text style={styles.sectionTitle}>Mensagens da Administração</Text>
          <FlatList
            data={adminMessages.slice(0, 2)}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => (
              <TouchableOpacity
                style={styles.adminMessageItem}
                onPress={() => {
                  setSelectedAdminMessage(item);
                  setShowAdminMessageModal(true);
                }}
              >
                <View style={styles.messageContent}>
                  <Text style={styles.messageTitle}>{item.title}</Text>
                  <Text style={styles.messagePreview} numberOfLines={2}>
                    {item.message}
                  </Text>
                  <Text style={styles.messageDate}>
                    {new Date(item.created_at).toLocaleDateString('pt-BR')}
                  </Text>
                </View>
                <Ionicons name="chevron-forward" size={20} color="#C7C7CC" />
              </TouchableOpacity>
            )}
          />
        </View>
      )}

      {/* Trip Type Modal */}
      <TripTypeModal
        visible={showTripTypeModal}
        onClose={() => setShowTripTypeModal(false)}
        onConfirm={handleTripTypeConfirm}
      />

      {/* Google Map Modal */}
      <Modal 
        visible={showGoogleMapModal} 
        animationType="slide" 
        presentationStyle="pageSheet"
      >
        <GoogleMapView
          onTripRequest={handleGoogleMapTripRequest}
          onClose={() => setShowGoogleMapModal(false)}
          isForMe={tripIsForMe}
          passengerName={tripPassengerName}
        />
      </Modal>

      {/* Photo Viewer Modal */}
      <Modal visible={showPhotoModal} transparent animationType="fade">
        <View style={styles.photoModalContainer}>
          <TouchableOpacity
            style={styles.photoModalOverlay}
            onPress={() => setShowPhotoModal(false)}
          >
            <View style={styles.photoModalContent}>
              {selectedPhoto && (
                <Image source={{ uri: selectedPhoto }} style={styles.fullPhoto} />
              )}
              <TouchableOpacity
                style={styles.closePhotoButton}
                onPress={() => setShowPhotoModal(false)}
              >
                <Ionicons name="close" size={24} color="#fff" />
              </TouchableOpacity>
            </View>
          </TouchableOpacity>
        </View>
      </Modal>

      {/* Rating Modal */}
      <Modal visible={showRatingModal} transparent animationType="slide">
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Avalie o Motorista</Text>
            <Text style={styles.modalSubtitle}>
              Como foi sua experiência com {tripToRate?.driver_name}?
            </Text>

            <View style={styles.ratingSection}>
              {renderStarRating(selectedRating, setSelectedRating)}
            </View>

            <TextInput
              style={styles.commentInput}
              placeholder="Comentário opcional..."
              placeholderTextColor="#999"
              value={ratingComment}
              onChangeText={setRatingComment}
              multiline
              numberOfLines={3}
              maxLength={500}
            />

            <View style={styles.modalActions}>
              <TouchableOpacity
                style={styles.cancelModalButton}
                onPress={() => {
                  setShowRatingModal(false);
                  setSelectedRating(0);
                  setRatingComment('');
                  setTripToRate(null);
                  setCurrentTrip(null);
                }}
              >
                <Text style={styles.cancelModalButtonText}>Pular</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.confirmModalButton, selectedRating === 0 && styles.disabledButton]}
                onPress={handleRateDriver}
                disabled={selectedRating === 0 || loading}
              >
                {loading ? (
                  <ActivityIndicator color="#fff" />
                ) : (
                  <Text style={styles.confirmModalButtonText}>Avaliar</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Chat Modal */}
      {currentTrip && (
        <Modal visible={showChatModal} animationType="slide" presentationStyle="pageSheet">
          <ChatComponent
            tripId={currentTrip.id}
            currentUserId={user?.id || ''}
            onClose={() => setShowChatModal(false)}
            onNewMessage={() => setNewMessageAlert(true)}
          />
        </Modal>
      )}

      {/* Report Modal */}
      <Modal visible={showReportModal} transparent animationType="slide">
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Enviar Relatório</Text>

            <TextInput
              style={styles.input}
              placeholder="Título do relatório"
              placeholderTextColor="#999"
              value={reportTitle}
              onChangeText={setReportTitle}
              maxLength={100}
            />

            <TextInput
              style={styles.textArea}
              placeholder="Descreva o problema..."
              placeholderTextColor="#999"
              value={reportDescription}
              onChangeText={setReportDescription}
              multiline
              numberOfLines={4}
              maxLength={1000}
            />

            <View style={styles.modalActions}>
              <TouchableOpacity
                style={styles.cancelModalButton}
                onPress={() => {
                  setShowReportModal(false);
                  setReportTitle('');
                  setReportDescription('');
                }}
              >
                <Text style={styles.cancelModalButtonText}>Cancelar</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.confirmModalButton}
                onPress={handleSubmitReport}
                disabled={loading}
              >
                {loading ? (
                  <ActivityIndicator color="#fff" />
                ) : (
                  <Text style={styles.confirmModalButtonText}>Enviar</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Admin Message Modal */}
      <Modal visible={showAdminMessageModal} transparent animationType="slide">
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>{selectedAdminMessage?.title}</Text>
            <Text style={styles.adminMessageText}>{selectedAdminMessage?.message}</Text>
            
            <View style={styles.modalActions}>
              <TouchableOpacity
                style={styles.confirmModalButton}
                onPress={() => setShowAdminMessageModal(false)}
              >
                <Text style={styles.confirmModalButtonText}>Fechar</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Loading Overlay */}
      {loading && (
        <View style={styles.loadingOverlay}>
          <ActivityIndicator size="large" color="#4CAF50" />
          <Text style={styles.loadingText}>Carregando...</Text>
        </View>
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 20,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  profileImage: {
    width: 50,
    height: 50,
    borderRadius: 25,
    marginRight: 15,
  },
  profilePlaceholder: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#e0e0e0',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 15,
  },
  headerText: {
    flex: 1,
  },
  welcomeText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  subtitleText: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  logoutButton: {
    padding: 10,
  },
  currentTripCard: {
    backgroundColor: '#fff',
    margin: 20,
    borderRadius: 15,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  tripHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  tripTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  statusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 15,
  },
  statusText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  searchingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 20,
  },
  searchingIndicator: {
    marginRight: 10,
  },
  searchingText: {
    fontSize: 16,
    color: '#4CAF50',
    fontWeight: '500',
  },
  driverInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
    padding: 15,
    backgroundColor: '#f8f9fa',
    borderRadius: 10,
  },
  driverPhoto: {
    width: 50,
    height: 50,
    borderRadius: 25,
    marginRight: 15,
  },
  driverPhotoPlaceholder: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#e0e0e0',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 15,
  },
  driverDetails: {
    flex: 1,
  },
  driverName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  driverRating: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  ratingText: {
    marginLeft: 5,
    fontSize: 14,
    color: '#666',
  },
  tripDetails: {
    flexDirection: 'row',
    marginBottom: 15,
  },
  tripRoute: {
    flex: 1,
  },
  routePoint: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 5,
  },
  routeLine: {
    width: 2,
    height: 20,
    backgroundColor: '#ddd',
    marginLeft: 5,
    marginVertical: 2,
  },
  routeText: {
    marginLeft: 10,
    fontSize: 14,
    color: '#333',
    flex: 1,
  },
  tripPrice: {
    alignItems: 'flex-end',
    justifyContent: 'center',
  },
  priceText: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#4CAF50',
  },
  passengerInfoCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#E3F2FD',
    padding: 12,
    borderRadius: 8,
    marginBottom: 15,
    gap: 8,
  },
  passengerInfoText: {
    fontSize: 14,
    color: '#1976D2',
    fontWeight: '500',
  },
  tripActions: {
    gap: 10,
  },
  chatButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#2196F3',
    padding: 15,
    borderRadius: 10,
    position: 'relative',
  },
  chatButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 10,
  },
  messageAlert: {
    position: 'absolute',
    top: -5,
    right: -5,
    backgroundColor: '#FF3B30',
    width: 20,
    height: 20,
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center',
  },
  messageAlertText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  cancelButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#FF3B30',
    padding: 15,
    borderRadius: 10,
  },
  cancelButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 10,
  },
  mapContainer: {
    height: 200,
    borderRadius: 10,
    overflow: 'hidden',
    marginTop: 10,
  },
  mainActions: {
    margin: 20,
  },
  actionGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    gap: 15,
  },
  requestButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#4CAF50',
    padding: 20,
    borderRadius: 15,
    width: '100%',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  requestButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    marginLeft: 10,
  },
  actionButton: {
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 15,
    width: '48%',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  actionButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    marginTop: 8,
  },
  recentTrips: {
    margin: 20,
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  tripHistoryItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  tripInfo: {
    flex: 1,
  },
  tripDestination: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 5,
  },
  tripDate: {
    fontSize: 14,
    color: '#666',
  },
  tripPassenger: {
    fontSize: 12,
    color: '#007AFF',
    fontStyle: 'italic',
    marginTop: 2,
  },
  tripMeta: {
    alignItems: 'flex-end',
  },
  tripStatus: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
    marginTop: 5,
  },
  tripStatusText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  adminMessages: {
    margin: 20,
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  adminMessageItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  messageContent: {
    flex: 1,
  },
  messageTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 5,
  },
  messagePreview: {
    fontSize: 14,
    color: '#666',
    marginBottom: 5,
  },
  messageDate: {
    fontSize: 12,
    color: '#999',
  },
  starContainer: {
    flexDirection: 'row',
    gap: 5,
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: '#fff',
    borderRadius: 20,
    padding: 25,
    width: '90%',
    maxWidth: 400,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
    marginBottom: 10,
  },
  modalSubtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 20,
  },
  ratingSection: {
    alignItems: 'center',
    marginBottom: 20,
  },
  commentInput: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 10,
    padding: 15,
    fontSize: 16,
    textAlignVertical: 'top',
    marginBottom: 20,
    maxHeight: 100,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 10,
    padding: 15,
    fontSize: 16,
    marginBottom: 15,
  },
  textArea: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 10,
    padding: 15,
    fontSize: 16,
    textAlignVertical: 'top',
    marginBottom: 20,
    minHeight: 100,
  },
  adminMessageText: {
    fontSize: 16,
    color: '#333',
    lineHeight: 24,
    marginBottom: 20,
  },
  modalActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 15,
  },
  cancelModalButton: {
    flex: 1,
    padding: 15,
    borderRadius: 10,
    backgroundColor: '#f0f0f0',
    alignItems: 'center',
  },
  cancelModalButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#666',
  },
  confirmModalButton: {
    flex: 1,
    padding: 15,
    borderRadius: 10,
    backgroundColor: '#4CAF50',
    alignItems: 'center',
  },
  confirmModalButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
  },
  disabledButton: {
    backgroundColor: '#ccc',
  },
  photoModalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
  },
  photoModalOverlay: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  photoModalContent: {
    position: 'relative',
  },
  fullPhoto: {
    width: 300,
    height: 300,
    borderRadius: 10,
  },
  closePhotoButton: {
    position: 'absolute',
    top: -40,
    right: 0,
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  loadingOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    color: '#fff',
    fontSize: 16,
    marginTop: 10,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorText: {
    fontSize: 16,
    color: '#FF3B30',
    textAlign: 'center',
  },
});