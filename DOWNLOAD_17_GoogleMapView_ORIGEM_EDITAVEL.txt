// ARQUIVO: C:\transportdf-mvp\frontend\components\GoogleMapView.tsx
// VERSÃO COM ORIGEM E DESTINO EDITÁVEIS

import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Alert,
  TextInput,
  ActivityIndicator,
  Platform,
  ScrollView,
  Dimensions,
  Keyboard,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import * as Location from 'expo-location';

const { width, height } = Dimensions.get('window');

interface Coordinates {
  latitude: number;
  longitude: number;
}

interface GoogleMapViewProps {
  onTripRequest: (tripData: {
    origin: Coordinates;
    destination: Coordinates;
    originAddress: string;
    destinationAddress: string;
    estimatedPrice: number;
    distance: string;
    duration: string;
    passengerName?: string;
  }) => void;
  onClose: () => void;
  isForMe: boolean;
  passengerName?: string;
}

// Locais populares de Brasília
const brasiliaLocations = [
  { name: 'Shopping Conjunto Nacional', address: 'SDN, CNB 02 - Asa Norte, Brasília - DF', search: 'shopping conjunto nacional brasilia' },
  { name: 'Shopping Brasília', address: 'SCN Q 5 Bloco A - Asa Norte, Brasília - DF', search: 'shopping brasilia df' },
  { name: 'Aeroporto Internacional de Brasília', address: 'Lago Sul, Brasília - DF', search: 'aeroporto internacional brasilia juscelino kubitschek' },
  { name: 'Rodoviária do Plano Piloto', address: 'Asa Norte, Brasília - DF', search: 'rodoviaria brasilia plano piloto' },
  { name: 'Universidade de Brasília - UnB', address: 'Campus Darcy Ribeiro, Brasília - DF', search: 'universidade de brasilia unb campus darcy ribeiro' },
  { name: 'Hospital de Base do DF', address: 'SMHS Área Especial Q 101 - Asa Sul, Brasília - DF', search: 'hospital de base distrito federal' },
  { name: 'Congresso Nacional', address: 'Praça dos Três Poderes, Brasília - DF', search: 'congresso nacional brasilia' },
  { name: 'Catedral de Brasília', address: 'Esplanada dos Ministérios, Brasília - DF', search: 'catedral metropolitana brasilia' },
  { name: 'Torre de TV', address: 'Eixo Monumental, Brasília - DF', search: 'torre de tv brasilia' },
  { name: 'Palácio do Planalto', address: 'Praça dos Três Poderes, Brasília - DF', search: 'palacio do planalto brasilia' },
  { name: 'Shopping Iguatemi', address: 'SHIN CA 4 Lote A - Lago Norte, Brasília - DF', search: 'shopping iguatemi brasilia' },
  { name: 'Shopping Taguatinga', address: 'Pistão Norte - Taguatinga, Brasília - DF', search: 'shopping taguatinga df' },
  { name: 'Estádio Nacional Mané Garrincha', address: 'SRPN, Brasília - DF', search: 'estadio mane garrincha brasilia' },
  { name: 'Esplanada dos Ministérios', address: 'Zona Cívico-Administrativa, Brasília - DF', search: 'esplanada ministerios brasilia' },
  { name: 'Parque da Cidade', address: 'Asa Sul, Brasília - DF', search: 'parque cidade brasilia' },
];

const GoogleMapView: React.FC<GoogleMapViewProps> = ({ 
  onTripRequest, 
  onClose, 
  isForMe, 
  passengerName 
}) => {
  const [userLocation, setUserLocation] = useState<Coordinates | null>(null);
  const [origin, setOrigin] = useState<Coordinates | null>(null);
  const [destination, setDestination] = useState<Coordinates | null>(null);
  const [originAddress, setOriginAddress] = useState('');
  const [destinationAddress, setDestinationAddress] = useState('');
  const [estimatedPrice, setEstimatedPrice] = useState(0);
  const [loading, setLoading] = useState(false);
  const [locationLoading, setLocationLoading] = useState(true);
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [searching, setSearching] = useState(false);
  const [activeField, setActiveField] = useState<'origin' | 'destination' | null>(null);

  const originInputRef = useRef<TextInput>(null);
  const destinationInputRef = useRef<TextInput>(null);
  const searchTimeout = useRef<NodeJS.Timeout | null>(null);

  const GOOGLE_MAPS_API_KEY = process.env.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY;

  useEffect(() => {
    getCurrentLocation();
  }, []);

  useEffect(() => {
    if (origin && destination) {
      calculateRoute();
    }
  }, [origin, destination]);

  const getCurrentLocation = async () => {
    try {
      setLocationLoading(true);
      const { status } = await Location.requestForegroundPermissionsAsync();
      
      if (status !== 'granted') {
        Alert.alert('Permissão Necessária', 'Para solicitar uma viagem, precisamos acessar sua localização.');
        return;
      }

      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.High,
      });

      const userCoords = {
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
      };

      setUserLocation(userCoords);

      // Se for "Para mim", usar localização atual como origem automaticamente
      if (isForMe) {
        setOrigin(userCoords);
        await reverseGeocodeLocation(userCoords, 'origin');
      }

    } catch (error) {
      console.error('Error getting location:', error);
      Alert.alert('Erro de Localização', 'Não foi possível obter sua localização. Verifique se o GPS está ativo.');
    } finally {
      setLocationLoading(false);
    }
  };

  const reverseGeocodeLocation = async (coords: Coordinates, field: 'origin' | 'destination') => {
    if (!GOOGLE_MAPS_API_KEY) {
      if (field === 'origin') {
        setOriginAddress('Localização selecionada');
      }
      return;
    }

    try {
      const response = await fetch(
        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${coords.latitude},${coords.longitude}&key=${GOOGLE_MAPS_API_KEY}&language=pt-BR&region=BR`
      );
      
      const data = await response.json();
      
      if (data.status === 'OK' && data.results.length > 0) {
        const address = data.results[0].formatted_address;
        if (field === 'origin') {
          setOriginAddress(address);
        }
      } else {
        if (field === 'origin') {
          setOriginAddress('Localização selecionada');
        }
      }
    } catch (error) {
      console.error('Error reverse geocoding:', error);
      if (field === 'origin') {
        setOriginAddress('Localização selecionada');
      }
    }
  };

  const searchPlaces = async (input: string) => {
    if (!GOOGLE_MAPS_API_KEY || input.length < 2) {
      setSearchResults([]);
      setShowResults(false);
      return;
    }

    setSearching(true);

    try {
      const searchQuery = `${input} Brasília DF Brasil`;
      
      const response = await fetch(
        `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(searchQuery)}&key=${GOOGLE_MAPS_API_KEY}&language=pt-BR&region=BR&components=country:BR`
      );
      
      const data = await response.json();
      
      if (data.status === 'OK' && data.results) {
        const filteredResults = data.results.filter(result => 
          result.formatted_address.includes('Brasília') || 
          result.formatted_address.includes('DF') ||
          result.formatted_address.includes('Distrito Federal')
        ).slice(0, 5);

        setSearchResults(filteredResults);
        setShowResults(filteredResults.length > 0);
      } else {
        const localResults = brasiliaLocations.filter(location =>
          location.name.toLowerCase().includes(input.toLowerCase()) ||
          location.address.toLowerCase().includes(input.toLowerCase())
        ).slice(0, 5);
        
        setSearchResults(localResults.map(loc => ({
          formatted_address: `${loc.name}, ${loc.address}`,
          geometry: null,
          place_id: loc.search,
          name: loc.name,
          isLocal: true
        })));
        setShowResults(localResults.length > 0);
      }
    } catch (error) {
      console.error('Error searching places:', error);
      const localResults = brasiliaLocations.filter(location =>
        location.name.toLowerCase().includes(input.toLowerCase()) ||
        location.address.toLowerCase().includes(input.toLowerCase())
      ).slice(0, 5);
      
      setSearchResults(localResults.map(loc => ({
        formatted_address: `${loc.name}, ${loc.address}`,
        geometry: null,
        place_id: loc.search,
        name: loc.name,
        isLocal: true
      })));
      setShowResults(localResults.length > 0);
    } finally {
      setSearching(false);
    }
  };

  const handleSearchChange = (text: string, field: 'origin' | 'destination') => {
    if (field === 'origin') {
      setOriginAddress(text);
    } else {
      setDestinationAddress(text);
    }
    
    if (searchTimeout.current) {
      clearTimeout(searchTimeout.current);
    }

    searchTimeout.current = setTimeout(() => {
      searchPlaces(text);
    }, 300);
  };

  const handleLocationSelect = async (result: any) => {
    setLoading(true);
    setShowResults(false);
    Keyboard.dismiss();

    try {
      let coords = null;
      
      if (result.geometry && result.geometry.location) {
        coords = {
          latitude: result.geometry.location.lat,
          longitude: result.geometry.location.lng,
        };
      } else if (result.isLocal) {
        const response = await fetch(
          `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(result.place_id)}&key=${GOOGLE_MAPS_API_KEY}&language=pt-BR&region=BR`
        );
        
        const data = await response.json();
        
        if (data.status === 'OK' && data.results.length > 0) {
          coords = {
            latitude: data.results[0].geometry.location.lat,
            longitude: data.results[0].geometry.location.lng,
          };
        }
      }
      
      if (coords) {
        const name = result.name || result.formatted_address.split(',')[0];
        
        if (activeField === 'origin') {
          setOrigin(coords);
          setOriginAddress(name);
        } else {
          setDestination(coords);
          setDestinationAddress(name);
        }
      } else {
        Alert.alert('Erro', 'Não foi possível obter coordenadas do local selecionado.');
      }
    } catch (error) {
      console.error('Error selecting location:', error);
      Alert.alert('Erro', 'Erro ao selecionar localização.');
    } finally {
      setLoading(false);
      setActiveField(null);
    }
  };

  const calculateRoute = async () => {
    if (!origin || !destination) return;

    try {
      setLoading(true);
      
      const distance = calculateDistance(origin, destination);
      const basePrice = 4.00;
      const pricePerKm = 2.80;
      const price = basePrice + (distance * pricePerKm);
      const surge = 1 + (Math.random() * 0.1 + 0.05);
      const finalPrice = price * surge;
      
      setEstimatedPrice(Math.round(finalPrice * 100) / 100);
      
    } catch (error) {
      console.error('Error calculating route:', error);
    } finally {
      setLoading(false);
    }
  };

  const calculateDistance = (point1: Coordinates, point2: Coordinates): number => {
    const R = 6371;
    const dLat = (point2.latitude - point1.latitude) * Math.PI / 180;
    const dLon = (point2.longitude - point1.longitude) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(point1.latitude * Math.PI / 180) * Math.cos(point2.latitude * Math.PI / 180) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  };

  const handleConfirmTrip = async () => {
    if (!origin || !destination || !originAddress || !destinationAddress) {
      Alert.alert('Dados Incompletos', 'Por favor, selecione origem e destino para continuar.');
      return;
    }

    const distance = calculateDistance(origin, destination);
    const duration = Math.max(8, Math.round(distance * 2.5));

    onTripRequest({
      origin,
      destination,
      originAddress,
      destinationAddress,
      estimatedPrice,
      distance: `${distance.toFixed(1)} km`,
      duration: `${duration} min`,
      passengerName,
    });
  };

  const resetField = (field: 'origin' | 'destination') => {
    if (field === 'origin') {
      setOrigin(null);
      setOriginAddress('');
    } else {
      setDestination(null);
      setDestinationAddress('');
      setEstimatedPrice(0);
    }
    setShowResults(false);
    setActiveField(null);
    setSearchResults([]);
  };

  const handleInputFocus = (field: 'origin' | 'destination') => {
    setActiveField(field);
    const text = field === 'origin' ? originAddress : destinationAddress;
    if (text.length >= 2) {
      searchPlaces(text);
    }
  };

  const handleInputBlur = () => {
    setTimeout(() => {
      setActiveField(null);
      setShowResults(false);
    }, 200);
  };

  if (!GOOGLE_MAPS_API_KEY) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.errorContainer}>
          <Ionicons name="warning" size={60} color="#FF9800" />
          <Text style={styles.errorTitle}>Configuração Necessária</Text>
          <Text style={styles.errorText}>
            Chave do Google Maps não configurada.{'\n\n'}
            Adicione EXPO_PUBLIC_GOOGLE_MAPS_API_KEY no arquivo .env
          </Text>
          <TouchableOpacity style={styles.closeButton} onPress={onClose}>
            <Text style={styles.closeButtonText}>Fechar</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={onClose} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color="#000" />
        </TouchableOpacity>
        <View style={styles.headerContent}>
          <Text style={styles.headerTitle}>
            {isForMe ? 'Para onde?' : `Viagem para ${passengerName}`}
          </Text>
          {!isForMe && (
            <Text style={styles.headerSubtitle}>Defina origem e destino</Text>
          )}
        </View>
      </View>

      {/* Search Section */}
      <View style={styles.searchSection}>
        {/* Origin */}
        <View style={styles.locationRow}>
          <View style={styles.locationIndicator}>
            <View style={styles.originDot} />
          </View>
          <View style={styles.locationContent}>
            <Text style={styles.locationLabel}>DE</Text>
            <TextInput
              ref={originInputRef}
              style={styles.locationInput}
              placeholder={isForMe ? "Sua localização atual" : "Digite a origem..."}
              placeholderTextColor="#666"
              value={originAddress}
              onChangeText={(text) => handleSearchChange(text, 'origin')}
              onFocus={() => handleInputFocus('origin')}
              onBlur={handleInputBlur}
              editable={!isForMe || !locationLoading}
            />
          </View>
          <View style={styles.inputActions}>
            {locationLoading && isForMe && (
              <ActivityIndicator size="small" color="#007AFF" />
            )}
            {originAddress.length > 0 && (!isForMe || !locationLoading) && (
              <TouchableOpacity onPress={() => resetField('origin')} style={styles.clearButton}>
                <Ionicons name="close-circle" size={20} color="#666" />
              </TouchableOpacity>
            )}
          </View>
        </View>

        {/* Divider Line */}
        <View style={styles.dividerLine} />

        {/* Destination */}
        <View style={styles.locationRow}>
          <View style={styles.locationIndicator}>
            <View style={styles.destinationDot} />
          </View>
          <View style={styles.locationContent}>
            <Text style={styles.locationLabel}>PARA</Text>
            <TextInput
              ref={destinationInputRef}
              style={styles.locationInput}
              placeholder="Para onde quer ir?"
              placeholderTextColor="#666"
              value={destinationAddress}
              onChangeText={(text) => handleSearchChange(text, 'destination')}
              onFocus={() => handleInputFocus('destination')}
              onBlur={handleInputBlur}
            />
          </View>
          <View style={styles.inputActions}>
            {searching && activeField === 'destination' && (
              <ActivityIndicator size="small" color="#007AFF" />
            )}
            {destinationAddress.length > 0 && (
              <TouchableOpacity onPress={() => resetField('destination')} style={styles.clearButton}>
                <Ionicons name="close-circle" size={20} color="#666" />
              </TouchableOpacity>
            )}
          </View>
        </View>
      </View>

      <ScrollView style={styles.content} keyboardShouldPersistTaps="handled">
        {/* Search Results */}
        {showResults && searchResults.length > 0 && (
          <View style={styles.resultsSection}>
            <Text style={styles.resultsSectionTitle}>
              {activeField === 'origin' ? 'Escolha a origem' : 'Escolha o destino'}
            </Text>
            {searchResults.map((result, index) => (
              <TouchableOpacity
                key={`${result.place_id || result.name}-${index}`}
                style={styles.resultItem}
                onPress={() => handleLocationSelect(result)}
              >
                <View style={styles.resultIcon}>
                  <Ionicons name="location" size={18} color="#007AFF" />
                </View>
                <View style={styles.resultContent}>
                  <Text style={styles.resultName}>
                    {result.name || result.formatted_address.split(',')[0]}
                  </Text>
                  <Text style={styles.resultAddress} numberOfLines={1}>
                    {result.formatted_address}
                  </Text>
                </View>
                <Ionicons name="chevron-forward" size={16} color="#C7C7CC" />
              </TouchableOpacity>
            ))}
          </View>
        )}

        {/* Route Preview */}
        {origin && destination && estimatedPrice > 0 && (
          <View style={styles.routePreview}>
            <View style={styles.routeHeader}>
              <Ionicons name="map" size={24} color="#007AFF" />
              <Text style={styles.routeTitle}>Prévia da Rota</Text>
            </View>
            
            <View style={styles.routeDetails}>
              <View style={styles.routeInfo}>
                <Text style={styles.routeDistance}>
                  {calculateDistance(origin, destination).toFixed(1)} km
                </Text>
                <Text style={styles.routeDuration}>
                  {Math.max(8, Math.round(calculateDistance(origin, destination) * 2.5))} min
                </Text>
              </View>
              
              <View style={styles.priceContainer}>
                <Text style={styles.priceLabel}>Preço estimado</Text>
                <Text style={styles.priceValue}>R$ {estimatedPrice.toFixed(2)}</Text>
                <Text style={styles.priceNote}>Pode variar</Text>
              </View>
            </View>

            {!isForMe && passengerName && (
              <View style={styles.passengerInfo}>
                <Ionicons name="person" size={16} color="#007AFF" />
                <Text style={styles.passengerText}>Passageiro: {passengerName}</Text>
              </View>
            )}
          </View>
        )}

        {/* Quick Destinations quando não está buscando */}
        {!showResults && !activeField && (
          <View style={styles.quickDestinations}>
            <Text style={styles.sectionTitle}>🎯 Locais populares</Text>
            {brasiliaLocations.slice(0, 6).map((location, index) => (
              <TouchableOpacity
                key={index}
                style={styles.quickItem}
                onPress={() => handleLocationSelect({
                  name: location.name,
                  formatted_address: `${location.name}, ${location.address}`,
                  place_id: location.search,
                  isLocal: true
                })}
              >
                <View style={styles.quickIcon}>
                  <Ionicons name="location" size={18} color="#007AFF" />
                </View>
                <View style={styles.quickContent}>
                  <Text style={styles.quickName}>{location.name}</Text>
                  <Text style={styles.quickAddress} numberOfLines={1}>
                    {location.address}
                  </Text>
                </View>
                <Ionicons name="chevron-forward" size={16} color="#C7C7CC" />
              </TouchableOpacity>
            ))}
          </View>
        )}
      </ScrollView>

      {/* Bottom Action Button */}
      {origin && destination && estimatedPrice > 0 && (
        <View style={styles.bottomAction}>
          <TouchableOpacity
            style={styles.confirmButton}
            onPress={handleConfirmTrip}
            disabled={loading}
          >
            {loading ? (
              <ActivityIndicator color="#fff" />
            ) : (
              <>
                <Text style={styles.confirmButtonText}>Confirmar Viagem</Text>
                <Text style={styles.confirmButtonPrice}>R$ {estimatedPrice.toFixed(2)}</Text>
              </>
            )}
          </TouchableOpacity>
        </View>
      )}

      {/* Loading Overlay */}
      {loading && (
        <View style={styles.loadingOverlay}>
          <ActivityIndicator size="large" color="#007AFF" />
          <Text style={styles.loadingText}>Processando...</Text>
        </View>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F8F8',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5EA',
  },
  backButton: {
    padding: 8,
    marginRight: 8,
  },
  headerContent: {
    flex: 1,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#000',
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#8E8E93',
    marginTop: 2,
  },
  searchSection: {
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingVertical: 20,
    marginBottom: 8,
  },
  locationRow: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
  },
  locationIndicator: {
    width: 24,
    alignItems: 'center',
    marginRight: 16,
  },
  originDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#34C759',
  },
  destinationDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#FF3B30',
  },
  dividerLine: {
    marginLeft: 28,
    marginRight: 16,
    height: 1,
    backgroundColor: '#E5E5EA',
    marginVertical: 4,
  },
  locationContent: {
    flex: 1,
    marginRight: 12,
  },
  locationLabel: {
    fontSize: 12,
    fontWeight: '500',
    color: '#8E8E93',
    marginBottom: 2,
  },
  locationInput: {
    fontSize: 16,
    color: '#000',
    fontWeight: '400',
    padding: 0,
    margin: 0,
  },
  inputActions: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  clearButton: {
    padding: 4,
  },
  content: {
    flex: 1,
  },
  resultsSection: {
    backgroundColor: '#fff',
    marginBottom: 8,
  },
  resultsSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000',
    paddingHorizontal: 16,
    paddingTop: 16,
    paddingBottom: 8,
  },
  resultItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#F2F2F7',
  },
  resultIcon: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#F2F2F7',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  resultContent: {
    flex: 1,
    marginRight: 12,
  },
  resultName: {
    fontSize: 16,
    fontWeight: '500',
    color: '#000',
    marginBottom: 2,
  },
  resultAddress: {
    fontSize: 14,
    color: '#8E8E93',
  },
  routePreview: {
    backgroundColor: '#fff',
    marginBottom: 8,
    padding: 16,
  },
  routeHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  routeTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000',
    marginLeft: 8,
  },
  routeDetails: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  routeInfo: {
    flex: 1,
  },
  routeDistance: {
    fontSize: 18,
    fontWeight: '600',
    color: '#000',
    marginBottom: 2,
  },
  routeDuration: {
    fontSize: 14,
    color: '#8E8E93',
  },
  priceContainer: {
    alignItems: 'flex-end',
  },
  priceLabel: {
    fontSize: 12,
    color: '#8E8E93',
    marginBottom: 2,
  },
  priceValue: {
    fontSize: 20,
    fontWeight: '700',
    color: '#34C759',
    marginBottom: 2,
  },
  priceNote: {
    fontSize: 11,
    color: '#8E8E93',
  },
  passengerInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F0F7FF',
    padding: 12,
    borderRadius: 8,
    gap: 8,
  },
  passengerText: {
    fontSize: 14,
    color: '#007AFF',
    fontWeight: '500',
  },
  quickDestinations: {
    backgroundColor: '#fff',
    marginBottom: 8,
    paddingBottom: 8,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000',
    paddingHorizontal: 16,
    paddingTop: 16,
    paddingBottom: 8,
  },
  quickItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#F2F2F7',
  },
  quickIcon: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#F2F2F7',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  quickContent: {
    flex: 1,
    marginRight: 12,
  },
  quickName: {
    fontSize: 16,
    fontWeight: '500',
    color: '#000',
    marginBottom: 2,
  },
  quickAddress: {
    fontSize: 14,
    color: '#8E8E93',
  },
  bottomAction: {
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingVertical: 16,
    borderTopWidth: 1,
    borderTopColor: '#E5E5EA',
  },
  confirmButton: {
    backgroundColor: '#007AFF',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
    shadowColor: '#007AFF',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  confirmButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
    marginRight: 8,
  },
  confirmButtonPrice: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '500',
    backgroundColor: 'rgba(255,255,255,0.2)',
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 4,
  },
  loadingOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(248,248,248,0.9)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#007AFF',
    fontWeight: '500',
  },
  errorContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 40,
  },
  errorTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#000',
    marginTop: 20,
    marginBottom: 16,
  },
  errorText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 40,
    lineHeight: 24,
  },
  closeButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 30,
    paddingVertical: 12,
    borderRadius: 8,
  },
  closeButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default GoogleMapView;