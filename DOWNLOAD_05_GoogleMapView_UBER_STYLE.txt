// ARQUIVO: C:\transportdf-mvp\frontend\components\GoogleMapView.tsx
// SUBSTITUA COMPLETAMENTE - Versão Estilo Uber/99

import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Alert,
  TextInput,
  ActivityIndicator,
  Platform,
  ScrollView,
  Dimensions,
  Keyboard,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import * as Location from 'expo-location';

const { width, height } = Dimensions.get('window');

interface Coordinates {
  latitude: number;
  longitude: number;
}

interface GoogleMapViewProps {
  onTripRequest: (tripData: {
    origin: Coordinates;
    destination: Coordinates;
    originAddress: string;
    destinationAddress: string;
    estimatedPrice: number;
    distance: string;
    duration: string;
  }) => void;
  onClose: () => void;
}

// Brasília locations com mais detalhes (estilo Uber)
const brasiliaLocations = [
  // Principais pontos comerciais
  { name: 'Shopping Conjunto Nacional', address: 'SDN, CNB 02 - Asa Norte, Brasília - DF', area: '🛍️ Shopping', coords: { lat: -15.7942, lng: -47.8922 }, category: 'shopping' },
  { name: 'Shopping Brasília', address: 'SCN Q 5 Bloco A - Asa Norte, Brasília - DF', area: '🛍️ Shopping', coords: { lat: -15.7642, lng: -47.8822 }, category: 'shopping' },
  { name: 'Shopping Iguatemi', address: 'SHIN CA 4 Lote A - Lago Norte, Brasília - DF', area: '🛍️ Shopping', coords: { lat: -15.7842, lng: -47.8922 }, category: 'shopping' },
  { name: 'Shopping Taguatinga', address: 'Pistão Norte - Taguatinga, Brasília - DF', area: '🛍️ Shopping', coords: { lat: -15.8370, lng: -48.0527 }, category: 'shopping' },
  
  // Transporte
  { name: 'Aeroporto Internacional de Brasília', address: 'Lago Sul, Brasília - DF', area: '✈️ Aeroporto JK', coords: { lat: -15.8711, lng: -47.9178 }, category: 'transport' },
  { name: 'Rodoviária do Plano Piloto', address: 'Asa Norte, Brasília - DF', area: '🚌 Rodoviária', coords: { lat: -15.7945, lng: -47.8828 }, category: 'transport' },
  { name: 'Estação Central - Metrô', address: 'Asa Sul, Brasília - DF', area: '🚇 Metrô', coords: { lat: -15.7942, lng: -47.8822 }, category: 'transport' },
  
  // Áreas residenciais
  { name: 'Asa Norte', address: 'Plano Piloto, Brasília - DF', area: '🏠 Residencial', coords: { lat: -15.7801, lng: -47.8827 }, category: 'residential' },
  { name: 'Asa Sul', address: 'Plano Piloto, Brasília - DF', area: '🏠 Residencial', coords: { lat: -15.8267, lng: -47.8934 }, category: 'residential' },
  { name: 'Lago Norte', address: 'Brasília - DF', area: '🏠 Residencial', coords: { lat: -15.7342, lng: -47.8422 }, category: 'residential' },
  { name: 'Lago Sul', address: 'Brasília - DF', area: '🏠 Residencial', coords: { lat: -15.8442, lng: -47.8422 }, category: 'residential' },
  { name: 'Sudoeste', address: 'SQSW - Brasília - DF', area: '🏠 Residencial', coords: { lat: -15.7942, lng: -47.9022 }, category: 'residential' },
  { name: 'Noroeste', address: 'SQNW - Brasília - DF', area: '🏠 Residencial', coords: { lat: -15.7642, lng: -47.8822 }, category: 'residential' },
  
  // Regiões Administrativas
  { name: 'Taguatinga', address: 'Taguatinga - DF', area: '🏘️ RA III', coords: { lat: -15.8270, lng: -48.0427 }, category: 'administrative' },
  { name: 'Ceilândia', address: 'Ceilândia - DF', area: '🏘️ RA IX', coords: { lat: -15.8190, lng: -48.1076 }, category: 'administrative' },
  { name: 'Gama', address: 'Gama - DF', area: '🏘️ RA II', coords: { lat: -16.0209, lng: -48.0647 }, category: 'administrative' },
  { name: 'Sobradinho', address: 'Sobradinho - DF', area: '🏘️ RA V', coords: { lat: -15.6536, lng: -47.7863 }, category: 'administrative' },
  { name: 'Planaltina', address: 'Planaltina - DF', area: '🏘️ RA VI', coords: { lat: -15.4523, lng: -47.6142 }, category: 'administrative' },
  { name: 'Águas Claras', address: 'Águas Claras - DF', area: '🏘️ RA XX', coords: { lat: -15.8342, lng: -48.0122 }, category: 'administrative' },
  { name: 'Vicente Pires', address: 'Vicente Pires - DF', area: '🏘️ RA XXX', coords: { lat: -15.8042, lng: -48.0322 }, category: 'administrative' },
  { name: 'Guará', address: 'Guará - DF', area: '🏘️ RA X', coords: { lat: -15.8242, lng: -47.9522 }, category: 'administrative' },
  
  // Pontos turísticos e governo
  { name: 'Esplanada dos Ministérios', address: 'Zona Cívico-Administrativa, Brasília - DF', area: '🏛️ Governo', coords: { lat: -15.7942, lng: -47.8822 }, category: 'government' },
  { name: 'Congresso Nacional', address: 'Praça dos Três Poderes, Brasília - DF', area: '🏛️ Governo', coords: { lat: -15.7998, lng: -47.8635 }, category: 'government' },
  { name: 'Palácio do Planalto', address: 'Praça dos Três Poderes, Brasília - DF', area: '🏛️ Governo', coords: { lat: -15.7987, lng: -47.8606 }, category: 'government' },
  { name: 'Catedral de Brasília', address: 'Esplanada dos Ministérios, Brasília - DF', area: '⛪ Turismo', coords: { lat: -15.7942, lng: -47.8755 }, category: 'tourism' },
  { name: 'Torre de TV', address: 'Eixo Monumental, Brasília - DF', area: '📡 Turismo', coords: { lat: -15.7902, lng: -47.8922 }, category: 'tourism' },
  
  // Universidades e hospitais
  { name: 'Universidade de Brasília - UnB', address: 'Campus Darcy Ribeiro, Brasília - DF', area: '🎓 Educação', coords: { lat: -15.7642, lng: -47.8722 }, category: 'education' },
  { name: 'Hospital de Base do DF', address: 'SMHS Área Especial Q 101 - Asa Sul, Brasília - DF', area: '🏥 Saúde', coords: { lat: -15.7642, lng: -47.8922 }, category: 'health' },
  { name: 'Hospital Sarah Kubitschek', address: 'SMHS Área Especial Q 501 - Asa Sul, Brasília - DF', area: '🏥 Saúde', coords: { lat: -15.7742, lng: -47.8822 }, category: 'health' },
  
  // Áreas comerciais
  { name: 'W3 Norte', address: 'Via W3 Norte, Brasília - DF', area: '🏪 Comercial', coords: { lat: -15.7701, lng: -47.8827 }, category: 'commercial' },
  { name: 'W3 Sul', address: 'Via W3 Sul, Brasília - DF', area: '🏪 Comercial', coords: { lat: -15.8167, lng: -47.8934 }, category: 'commercial' },
  { name: 'Setor Comercial Sul - SCS', address: 'SCS, Brasília - DF', area: '🏪 Comercial', coords: { lat: -15.8042, lng: -47.8822 }, category: 'commercial' },
  { name: 'Setor Comercial Norte - SCN', address: 'SCN, Brasília - DF', area: '🏪 Comercial', coords: { lat: -15.7842, lng: -47.8822 }, category: 'commercial' },
];

const GoogleMapView: React.FC<GoogleMapViewProps> = ({ onTripRequest, onClose }) => {
  const [userLocation, setUserLocation] = useState<Coordinates | null>(null);
  const [destination, setDestination] = useState<Coordinates | null>(null);
  const [destinationAddress, setDestinationAddress] = useState('');
  const [originAddress, setOriginAddress] = useState('');
  const [estimatedPrice, setEstimatedPrice] = useState(0);
  const [loading, setLoading] = useState(false);
  const [locationLoading, setLocationLoading] = useState(true);
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [recentSearches] = useState(['Shopping Conjunto Nacional', 'Aeroporto JK', 'UnB', 'Taguatinga']);
  const [inputFocused, setInputFocused] = useState(false);

  const inputRef = useRef<TextInput>(null);

  useEffect(() => {
    getCurrentLocation();
  }, []);

  useEffect(() => {
    if (userLocation && destination) {
      calculateRoute();
    }
  }, [userLocation, destination]);

  const getCurrentLocation = async () => {
    try {
      setLocationLoading(true);
      const { status } = await Location.requestForegroundPermissionsAsync();
      
      if (status !== 'granted') {
        Alert.alert('Permissão Necessária', 'Para solicitar uma viagem, precisamos acessar sua localização.');
        return;
      }

      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.High,
      });

      const userCoords = {
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
      };

      setUserLocation(userCoords);

      // Get address for current location
      try {
        const reverseGeocode = await Location.reverseGeocodeAsync(userCoords);
        if (reverseGeocode.length > 0) {
          const address = reverseGeocode[0];
          const formattedAddress = `${address.street || ''} ${address.streetNumber || ''}, ${address.district || ''}, ${address.city || 'Brasília'} - ${address.region || 'DF'}`.trim();
          setOriginAddress(formattedAddress || 'Sua localização atual');
        } else {
          setOriginAddress('Sua localização atual');
        }
      } catch (error) {
        setOriginAddress('Sua localização atual');
      }

    } catch (error) {
      console.error('Error getting location:', error);
      Alert.alert('Erro de Localização', 'Não foi possível obter sua localização. Verifique se o GPS está ativo.');
    } finally {
      setLocationLoading(false);
    }
  };

  const calculateRoute = async () => {
    if (!userLocation || !destination) return;

    try {
      setLoading(true);
      
      // Calculate distance using Haversine formula
      const distance = calculateDistance(userLocation, destination);
      
      // Calculate estimated price (R$ 4.00 base + R$ 2.80 per km - similar to Uber)
      const basePrice = 4.00;
      const pricePerKm = 2.80;
      const price = basePrice + (distance * pricePerKm);
      
      // Add surge pricing simulation (5-15% variation)
      const surge = 1 + (Math.random() * 0.1 + 0.05);
      const finalPrice = price * surge;
      
      setEstimatedPrice(Math.round(finalPrice * 100) / 100);
      
    } catch (error) {
      console.error('Error calculating route:', error);
    } finally {
      setLoading(false);
    }
  };

  // Haversine formula for distance calculation
  const calculateDistance = (point1: Coordinates, point2: Coordinates): number => {
    const R = 6371; // Earth's radius in km
    const dLat = (point2.latitude - point1.latitude) * Math.PI / 180;
    const dLon = (point2.longitude - point1.longitude) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(point1.latitude * Math.PI / 180) * Math.cos(point2.latitude * Math.PI / 180) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  };

  const handleSearchChange = (text: string) => {
    setDestinationAddress(text);
    
    if (text.length >= 2) {
      // Search in Brasília locations with fuzzy matching
      const filtered = brasiliaLocations.filter(location =>
        location.name.toLowerCase().includes(text.toLowerCase()) ||
        location.address.toLowerCase().includes(text.toLowerCase()) ||
        location.area.toLowerCase().includes(text.toLowerCase())
      ).slice(0, 6); // Limit results like Uber
      
      setSearchResults(filtered);
      setShowResults(filtered.length > 0);
    } else {
      setSearchResults([]);
      setShowResults(false);
    }
  };

  const handleLocationSelect = (location: any) => {
    const coords = {
      latitude: location.coords.lat,
      longitude: location.coords.lng,
    };
    
    setDestination(coords);
    setDestinationAddress(location.name);
    setShowResults(false);
    setInputFocused(false);
    Keyboard.dismiss();
  };

  const handleRecentSearchSelect = (searchTerm: string) => {
    const location = brasiliaLocations.find(loc => 
      loc.name.toLowerCase().includes(searchTerm.toLowerCase())
    );
    
    if (location) {
      handleLocationSelect(location);
    } else {
      setDestinationAddress(searchTerm);
      handleSearchChange(searchTerm);
    }
  };

  const handleConfirmTrip = () => {
    if (!userLocation || !destination || !destinationAddress) {
      Alert.alert('Dados Incompletos', 'Por favor, selecione um destino para continuar.');
      return;
    }

    const distance = calculateDistance(userLocation, destination);
    const duration = Math.max(8, Math.round(distance * 2.5)); // More realistic time estimate

    onTripRequest({
      origin: userLocation,
      destination,
      originAddress,
      destinationAddress,
      estimatedPrice,
      distance: `${distance.toFixed(1)} km`,
      duration: `${duration} min`,
    });
  };

  const resetDestination = () => {
    setDestination(null);
    setDestinationAddress('');
    setEstimatedPrice(0);
    setShowResults(false);
    setInputFocused(false);
  };

  const handleInputFocus = () => {
    setInputFocused(true);
    if (destinationAddress.length >= 2) {
      handleSearchChange(destinationAddress);
    }
  };

  const handleInputBlur = () => {
    // Delay to allow selection
    setTimeout(() => {
      setInputFocused(false);
      if (!destination) {
        setShowResults(false);
      }
    }, 200);
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Header - Estilo Uber */}
      <View style={styles.header}>
        <TouchableOpacity onPress={onClose} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color="#000" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Para onde?</Text>
      </View>

      {/* Search Section - Estilo Uber/99 */}
      <View style={styles.searchSection}>
        {/* Current Location */}
        <View style={styles.locationRow}>
          <View style={styles.locationIndicator}>
            <View style={styles.originDot} />
          </View>
          <View style={styles.locationContent}>
            <Text style={styles.locationLabel}>DE</Text>
            <Text style={styles.locationText} numberOfLines={1}>
              {locationLoading ? 'Obtendo localização...' : originAddress}
            </Text>
          </View>
          {locationLoading && (
            <ActivityIndicator size="small" color="#007AFF" style={styles.locationLoader} />
          )}
        </View>

        {/* Divider Line */}
        <View style={styles.dividerLine} />

        {/* Destination Input */}
        <View style={styles.locationRow}>
          <View style={styles.locationIndicator}>
            <View style={styles.destinationDot} />
          </View>
          <View style={styles.locationContent}>
            <Text style={styles.locationLabel}>PARA</Text>
            <TextInput
              ref={inputRef}
              style={styles.destinationInput}
              placeholder="Para onde você quer ir?"
              placeholderTextColor="#666"
              value={destinationAddress}
              onChangeText={handleSearchChange}
              onFocus={handleInputFocus}
              onBlur={handleInputBlur}
              returnKeyType="search"
              autoCorrect={false}
              autoCapitalize="words"
            />
          </View>
          {destinationAddress.length > 0 && (
            <TouchableOpacity onPress={resetDestination} style={styles.clearButton}>
              <Ionicons name="close-circle" size={20} color="#666" />
            </TouchableOpacity>
          )}
        </View>
      </View>

      <ScrollView style={styles.content} keyboardShouldPersistTaps="handled">
        {/* Search Results */}
        {showResults && searchResults.length > 0 && (
          <View style={styles.resultsSection}>
            <Text style={styles.resultsSectionTitle}>Resultados</Text>
            {searchResults.map((location, index) => (
              <TouchableOpacity
                key={`${location.name}-${index}`}
                style={styles.resultItem}
                onPress={() => handleLocationSelect(location)}
              >
                <View style={styles.resultIcon}>
                  <Ionicons name="location" size={18} color="#007AFF" />
                </View>
                <View style={styles.resultContent}>
                  <Text style={styles.resultName}>{location.name}</Text>
                  <Text style={styles.resultAddress} numberOfLines={1}>{location.address}</Text>
                  <Text style={styles.resultArea}>{location.area}</Text>
                </View>
                <Ionicons name="chevron-forward" size={16} color="#C7C7CC" />
              </TouchableOpacity>
            ))}
          </View>
        )}

        {/* Recent Searches */}
        {!showResults && !inputFocused && destinationAddress.length === 0 && (
          <View style={styles.recentsSection}>
            <Text style={styles.sectionTitle}>🕒 Buscas recentes</Text>
            {recentSearches.map((search, index) => (
              <TouchableOpacity
                key={index}
                style={styles.recentItem}
                onPress={() => handleRecentSearchSelect(search)}
              >
                <View style={styles.recentIcon}>
                  <Ionicons name="time" size={18} color="#666" />
                </View>
                <Text style={styles.recentText}>{search}</Text>
                <Ionicons name="chevron-forward" size={16} color="#C7C7CC" />
              </TouchableOpacity>
            ))}
          </View>
        )}

        {/* Map Placeholder com info da rota */}
        {destination && (
          <View style={styles.routePreview}>
            <View style={styles.routeHeader}>
              <Ionicons name="map" size={24} color="#007AFF" />
              <Text style={styles.routeTitle}>Prévia da Rota</Text>
            </View>
            
            <View style={styles.routeDetails}>
              <View style={styles.routeInfo}>
                <Text style={styles.routeDistance}>
                  {userLocation ? `${calculateDistance(userLocation, destination).toFixed(1)} km` : '-- km'}
                </Text>
                <Text style={styles.routeDuration}>
                  {userLocation ? `${Math.max(8, Math.round(calculateDistance(userLocation, destination) * 2.5))} min` : '-- min'}
                </Text>
              </View>
              
              <View style={styles.priceContainer}>
                <Text style={styles.priceLabel}>Preço estimado</Text>
                <Text style={styles.priceValue}>R$ {estimatedPrice.toFixed(2)}</Text>
                <Text style={styles.priceNote}>Pode variar</Text>
              </View>
            </View>
          </View>
        )}

        {/* Popular Destinations */}
        {!showResults && !inputFocused && destinationAddress.length === 0 && (
          <View style={styles.popularSection}>
            <Text style={styles.sectionTitle}>🎯 Destinos populares</Text>
            <View style={styles.popularGrid}>
              {brasiliaLocations.filter(loc => loc.category === 'shopping' || loc.category === 'transport').slice(0, 4).map((location) => (
                <TouchableOpacity
                  key={location.name}
                  style={styles.popularItem}
                  onPress={() => handleLocationSelect(location)}
                >
                  <Text style={styles.popularEmoji}>{location.area.split(' ')[0]}</Text>
                  <Text style={styles.popularName} numberOfLines={2}>{location.name}</Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>
        )}
      </ScrollView>

      {/* Bottom Action Button - Estilo Uber */}
      {destination && estimatedPrice > 0 && (
        <View style={styles.bottomAction}>
          <TouchableOpacity
            style={styles.confirmButton}
            onPress={handleConfirmTrip}
            disabled={loading}
          >
            {loading ? (
              <ActivityIndicator color="#fff" />
            ) : (
              <>
                <Text style={styles.confirmButtonText}>Confirmar Viagem</Text>
                <Text style={styles.confirmButtonPrice}>R$ {estimatedPrice.toFixed(2)}</Text>
              </>
            )}
          </TouchableOpacity>
        </View>
      )}

      {/* Loading Overlay */}
      {loading && (
        <View style={styles.loadingOverlay}>
          <ActivityIndicator size="large" color="#007AFF" />
          <Text style={styles.loadingText}>Calculando melhor rota...</Text>
        </View>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F8F8',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5EA',
  },
  backButton: {
    padding: 8,
    marginRight: 8,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#000',
  },
  searchSection: {
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingVertical: 20,
    marginBottom: 8,
  },
  locationRow: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
  },
  locationIndicator: {
    width: 24,
    alignItems: 'center',
    marginRight: 16,
  },
  originDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#34C759',
  },
  destinationDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#FF3B30',
  },
  dividerLine: {
    marginLeft: 28,
    marginRight: 16,
    height: 1,
    backgroundColor: '#E5E5EA',
    marginVertical: 4,
  },
  locationContent: {
    flex: 1,
    marginRight: 12,
  },
  locationLabel: {
    fontSize: 12,
    fontWeight: '500',
    color: '#8E8E93',
    marginBottom: 2,
  },
  locationText: {
    fontSize: 16,
    color: '#000',
    fontWeight: '400',
  },
  destinationInput: {
    fontSize: 16,
    color: '#000',
    fontWeight: '400',
    padding: 0,
    margin: 0,
  },
  locationLoader: {
    marginRight: 8,
  },
  clearButton: {
    padding: 4,
  },
  content: {
    flex: 1,
  },
  resultsSection: {
    backgroundColor: '#fff',
    marginBottom: 8,
  },
  resultsSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000',
    paddingHorizontal: 16,
    paddingTop: 16,
    paddingBottom: 8,
  },
  resultItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#F2F2F7',
  },
  resultIcon: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#F2F2F7',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  resultContent: {
    flex: 1,
    marginRight: 12,
  },
  resultName: {
    fontSize: 16,
    fontWeight: '500',
    color: '#000',
    marginBottom: 2,
  },
  resultAddress: {
    fontSize: 14,
    color: '#8E8E93',
    marginBottom: 2,
  },
  resultArea: {
    fontSize: 12,
    color: '#007AFF',
    fontWeight: '500',
  },
  recentsSection: {
    backgroundColor: '#fff',
    marginBottom: 8,
    paddingBottom: 8,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000',
    paddingHorizontal: 16,
    paddingTop: 16,
    paddingBottom: 8,
  },
  recentItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  recentIcon: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#F2F2F7',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  recentText: {
    flex: 1,
    fontSize: 16,
    color: '#000',
    marginRight: 12,
  },
  routePreview: {
    backgroundColor: '#fff',
    marginBottom: 8,
    padding: 16,
  },
  routeHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  routeTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000',
    marginLeft: 8,
  },
  routeDetails: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  routeInfo: {
    flex: 1,
  },
  routeDistance: {
    fontSize: 18,
    fontWeight: '600',
    color: '#000',
    marginBottom: 2,
  },
  routeDuration: {
    fontSize: 14,
    color: '#8E8E93',
  },
  priceContainer: {
    alignItems: 'flex-end',
  },
  priceLabel: {
    fontSize: 12,
    color: '#8E8E93',
    marginBottom: 2,
  },
  priceValue: {
    fontSize: 20,
    fontWeight: '700',
    color: '#34C759',
    marginBottom: 2,
  },
  priceNote: {
    fontSize: 11,
    color: '#8E8E93',
  },
  popularSection: {
    backgroundColor: '#fff',
    marginBottom: 20,
    paddingBottom: 16,
  },
  popularGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    paddingHorizontal: 16,
    gap: 12,
  },
  popularItem: {
    width: (width - 56) / 2,
    backgroundColor: '#F2F2F7',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    minHeight: 80,
    justifyContent: 'center',
  },
  popularEmoji: {
    fontSize: 24,
    marginBottom: 8,
  },
  popularName: {
    fontSize: 14,
    fontWeight: '500',
    color: '#000',
    textAlign: 'center',
  },
  bottomAction: {
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingVertical: 16,
    borderTopWidth: 1,
    borderTopColor: '#E5E5EA',
  },
  confirmButton: {
    backgroundColor: '#007AFF',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
    shadowColor: '#007AFF',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  confirmButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
    marginRight: 8,
  },
  confirmButtonPrice: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '500',
    backgroundColor: 'rgba(255,255,255,0.2)',
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 4,
  },
  loadingOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(248,248,248,0.9)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#007AFF',
    fontWeight: '500',
  },
});

export default GoogleMapView;